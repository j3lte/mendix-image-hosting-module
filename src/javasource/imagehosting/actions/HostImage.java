// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package imagehosting.actions;

import java.io.InputStream;
import java.io.OutputStream;
import com.mendix.core.Core;
import com.mendix.datastorage.XPathBasicQuery;
import com.mendix.datastorage.XPathQuery;
import com.mendix.externalinterface.connector.RequestHandler;
import com.mendix.m2ee.api.IMxRuntimeRequest;
import com.mendix.m2ee.api.IMxRuntimeResponse;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;

public class HostImage extends CustomJavaAction<java.lang.Boolean>
{
	private final java.lang.String RequestHandlerName;
	private final java.lang.String RequestHandlerParameterName;
	private final java.lang.Boolean AutoDetermineContentType;
	private final java.lang.String StaticContentTypeHeaderValue;
	private final java.lang.String SearchEntity;
	private final java.lang.String SearchEntityAttribute;

	public HostImage(
		IContext context,
		java.lang.String _requestHandlerName,
		java.lang.String _requestHandlerParameterName,
		java.lang.Boolean _autoDetermineContentType,
		java.lang.String _staticContentTypeHeaderValue,
		java.lang.String _searchEntity,
		java.lang.String _searchEntityAttribute
	)
	{
		super(context);
		this.RequestHandlerName = _requestHandlerName;
		this.RequestHandlerParameterName = _requestHandlerParameterName;
		this.AutoDetermineContentType = _autoDetermineContentType;
		this.StaticContentTypeHeaderValue = _staticContentTypeHeaderValue;
		this.SearchEntity = _searchEntity;
		this.SearchEntityAttribute = _searchEntityAttribute;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		try {
			Core.addRequestHandler(RequestHandlerName, new requestHandler()); //initialize the request handler
			Core.getLogger("RequestHandlers").info(RequestHandlerName + " has been initialized");
			
			return true;
		} catch (Exception e) {
			Core.getLogger("RequestHandlers").error( RequestHandlerName + " failed to initialize");
			return false;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "HostImage";
	}

	// BEGIN EXTRA CODE
	class requestHandler extends RequestHandler {
		@Override
		public void processRequest(IMxRuntimeRequest request,
								   IMxRuntimeResponse response, String arg2) throws Exception
		{

			String requestParam = request.getParameter(RequestHandlerParameterName);

			try {
				Core.getLogger("RequestHandlers").debug("Request Param found: " + requestParam);
				
				XPathBasicQuery query = Core
					.createXPathQuery("//" + SearchEntity + "[" + SearchEntityAttribute +"=$value]")
					.setVariable("value", requestParam)
					.setAmount(1);
				
                Core.getLogger("Image Hosting").debug(query.toString());
				java.util.List<IMendixObject> result = query.execute(getContext());
				
				IMendixObject obj = result.get(0); 

				OutputStream os = response.getOutputStream(); //take the output stream from the IMxRuntimeResponse
				InputStream is = Core.getFileDocumentContent(getContext(), obj); //get an input stream from your mendix object

				String fileExtension;

				if (AutoDetermineContentType){
						String resultFileExtension = determineContentType(obj.getValue(getContext(), "Name"));
						if (resultFileExtension.isEmpty()){
						    fileExtension = StaticContentTypeHeaderValue;
                        } else {
						    fileExtension = "image/" + resultFileExtension;
						}
				} else {
				    fileExtension = StaticContentTypeHeaderValue;
                }

				response.setContentType(fileExtension);
				response.addHeader("content-disposition", "inline");
                response.setStatus(IMxRuntimeResponse.OK); 
                is.transferTo(os);

			} catch (Exception e) {
                Core.getLogger("Image Hosting").error( e);
			    response.setStatus(IMxRuntimeResponse.BAD_REQUEST); //if this fails, respond with 200 status anyways
			}
		}
	}
	
	public static String determineContentType (String fileName) {
		try {
			String file_extension = fileName.substring(fileName.lastIndexOf(".") + 1);
			return file_extension;
		} catch (Exception e) {
			Core.getLogger("Image Hosting").error( "failed to determine file extension");
			return null;
		}

	}
	
	// END EXTRA CODE
}
